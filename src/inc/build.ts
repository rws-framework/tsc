import webpack from 'webpack';
import { configureWebpack } from './webpack';
import chalk from 'chalk';
import fs from 'fs';
import path from 'path';

interface Entries {
    [key: string]: string;
}

interface TsPaths {
    [key: string]: string[];
}

export async function buildCLI(
    entries: Entries,
    appRoot: string,
    runspaceDir: string,
    buildDir: string,
    outFileName: string,
    cliExecDir: string,
    tsPaths: TsPaths = {},
    isDev: boolean = false,
    hasRebuild: boolean = false,
    isVerbose: boolean = false
): Promise<void> {
    console.log(chalk.blue(`[DEBUG] Build directory: ${buildDir}`));
    console.log(chalk.blue(`[DEBUG] Runspace directory: ${runspaceDir}`));
    console.log(chalk.blue(`[DEBUG] CLI exec directory: ${cliExecDir}`));
    console.log(chalk.blue(`[DEBUG] Entry file: ${entries.main}`));
    
    // Ensure build directory exists
    if (!fs.existsSync(buildDir)) {
        fs.mkdirSync(buildDir, { recursive: true });
    }

    // Try webpack
    const webpackCfg = configureWebpack(entries, buildDir, outFileName, runspaceDir, tsPaths, isDev);
    console.log(`${chalk.green(`[RWS Transpile CLI]`)} Running webpack in ${chalk.blueBright(`"${runspaceDir}"`)} ...`);

    // Add environment variables
    webpackCfg.plugins?.push(new webpack.DefinePlugin({
        'process.env.RWS_CLI_EXEC': JSON.stringify(cliExecDir),
        'process.env.RWS_APP_ROOT': JSON.stringify(appRoot),
        'process.env.RWS_APP_RELOADED': JSON.stringify(hasRebuild)
    }));

    if(isVerbose){
        console.log(chalk.blue('[DEBUG] Webpack configuration:'), {
            entry: webpackCfg.entry,
            output: webpackCfg.output,
            resolve: {
                extensions: webpackCfg.resolve?.extensions,
                alias: webpackCfg.resolve?.alias
            }
        });
    }    
       
    try {
        await new Promise<void>((resolve, reject) => {
            webpack(webpackCfg).run((err, stats) => {
                if (err) {
                    console.error(chalk.red(`[ERROR] Webpack error: ${err.message}`));
                    reject(err);
                    return;
                }
                
                if (stats?.hasErrors()) {
                    console.error(chalk.red('[ERROR] Webpack build errors:'));
                    const info = stats.toJson();
                    if (info.errors) {
                        info.errors.forEach(error => {
                            console.error(chalk.red(error.message));
                        });
                    }
                    reject(new Error('Webpack build failed with errors'));
                    return;
                }
                
                // Log webpack stats
                console.log(chalk.green('[DEBUG] Webpack build completed'));
                const statsJson = stats?.toJson({
                    assets: true,
                    chunks: false,
                    modules: false
                });
                
                if (statsJson?.assets) {
                    console.log(chalk.green('[DEBUG] Generated assets:'));
                    statsJson.assets.forEach(asset => {
                        console.log(`- ${asset.name} (${asset.size} bytes)`);
                    });
                } else {
                    console.log(chalk.yellow('[DEBUG] No assets were generated by webpack'));
                }
                
                resolve();
            });
        });
    } catch (e) {
        const error = e as Error;
        console.error(chalk.red(`[ERROR] Webpack build error: ${error.message}`));
        console.error(error.stack);
        throw new Error(`Webpack build error: ${error.message}\n${error.stack}`);
    }

    // Check if webpack created the output file
    const outputFile = path.join(buildDir, outFileName);
    if (!fs.existsSync(outputFile)) {
        console.error(chalk.red(`[ERROR] Webpack did not create output file: ${outputFile}`));
        
        // List all files in the build directory
        console.error(chalk.red(`[ERROR] Files in build directory: ${fs.readdirSync(buildDir).join(', ') || 'none'}`));
        
        throw new Error(`Webpack did not create output file: ${outputFile}`);
    }
    
    console.log(chalk.green(`[RWS CLI] CLI client generated: ${outputFile}`));
    console.log(chalk.green(`[RWS CLI] File size: ${fs.statSync(outputFile).size} bytes`));
}